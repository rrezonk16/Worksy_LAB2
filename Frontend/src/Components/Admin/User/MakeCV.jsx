import React, { useState, useEffect } from 'react'
import axios from 'axios'
import html2pdf from 'html2pdf.js'
import Navbar from '../../Navigation/Navbar'
import Footer from '../../Navigation/Footer'
import { Grid } from 'ldrs/react'
import 'ldrs/react/Grid.css'

const MakeCV = () => {
  const [userData, setUserData] = useState(null)

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem('token')

        const userResponse = await axios.get('http://127.0.0.1:8000/api/me', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })

        const jobsResponse = await axios.get('http://127.0.0.1:8000/api/past-jobs', {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        })

        setUserData({ user: userResponse.data.user, jobs: jobsResponse.data.past_jobs })
      } catch (error) {
        console.error('Error fetching data:', error)
      }
    }

    fetchData()
  }, [])

  const generateHTMLCV = () => {
    if (!userData) return null

    return `
      <div id="cv-content" style="width: 210mm; min-height: 295mm; padding: 20mm; font-family: Arial, sans-serif; background: #f4f4f4;">
        <div style="display: flex; justify-content: space-between; border-bottom: 2px solid #2c3e50; padding-bottom: 20px;">
          <div style="flex: 1;">
            <h1 style="margin: 0; color: #2c3e50;">${userData.user.name} ${userData.user.surname}</h1>
            <p style="margin: 5px 0; font-size: 14px; color: #7f8c8d;">${userData.user.email}</p>
            <p style="margin: 5px 0; font-size: 14px; color: #7f8c8d;">${userData.user.phone_number}</p>
          </div>
          <div style="text-align: center; width: 120px;">
            <img src="${userData.user.details.profile_image}"  style="height: 100px; width: 100px; border-radius: 50%; object-fit: cover;" />
          </div>
        </div>

        <div style="margin-top: 20px;">
          <h2 style="color: #2980b9; margin-bottom: 5px;">About Me</h2>
          <p style="font-size: 14px; color: #34495e;">${userData.user.details.bio}</p>
        </div>

        <div style="margin-top: 20px;">
          <h2 style="color: #2980b9; margin-bottom: 5px;">Skills</h2>
          <p style="font-size: 14px; color: #34495e;">${userData.user.details.skills_tag}</p>
        </div>

        <div style="margin-top: 20px;">
          <h2 style="color: #2980b9; margin-bottom: 5px;">Social Links</h2>
          <div>
            ${userData.user.details.social_links[0] ? `<p><a href="${userData.user.details.social_links[0]}" style="font-size: 14px; color: #34495e;">LinkedIn</a></p>` : ''}
            ${userData.user.details.social_links[1] ? `<p><a href="${userData.user.details.social_links[1]}" style="font-size: 14px; color: #34495e;">GitHub</a></p>` : ''}
          </div>
        </div>

        <div style="margin-top: 20px; border-top: 2px solid #2c3e50; padding-top: 20px;">
          <h2 style="color: #2980b9; margin-bottom: 5px;">Work Experience</h2>
          ${userData.jobs.map(job => `
            <div style="margin-bottom: 20px;">
              <h3 style="margin: 0; font-size: 16px; color: #2c3e50;">${job.job_title} - <span style="font-size: 14px; color: #7f8c8d;">${job.company_name}, ${job.city}</span></h3>
              <p style="font-size: 14px; color: #7f8c8d;">${job.start_date} - ${job.end_date || 'Present'}</p>
              <p style="font-size: 14px; color: #34495e;">${job.description}</p>
            </div>
          `).join('')}
        </div>

        <div style="border-top: 2px solid #2c3e50; margin-top: 40px; padding-top: 20px; text-align: center;">
          <p style="font-size: 12px; color: #7f8c8d;">Generated by <strong>Worksy.com</strong></p>
        </div>
      </div>
    `
  }

  const generatePDF = () => {
    const cvHtml = generateHTMLCV()
    if (cvHtml) {
      const element = document.createElement('div')
      element.innerHTML = cvHtml
      document.body.appendChild(element)

      const opt = {
        margin: 0,
        filename: 'CV.pdf',
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: {
          scale: 2,
          useCORS: true, // This helps with loading external images
        },
        jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
      }

      html2pdf().set(opt).from(element).save().then(() => {
        document.body.removeChild(element)
      })
    }
  }

  if (!userData) {
    return (
      <div className="h-screen flex items-center justify-center">
        <Grid size="60" speed="1.5" color="black" />
      </div>
    )
  }

  return (
    <div>
      <Navbar />
      <div className="flex justify-center my-6">
        <button
          onClick={generatePDF}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg shadow-md transition duration-200"
        >
          Download CV as PDF
        </button>
      </div>
      <div className="px-4 pb-10" dangerouslySetInnerHTML={{ __html: generateHTMLCV() }} />
      <Footer />
    </div>
  )
}

export default MakeCV
